name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: pbl-assistant-backend

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: poetry install --no-interaction --no-root
        
      - name: Install project
        working-directory: ./backend
        run: poetry install --no-interaction
        
      - name: Run Black
        working-directory: ./backend
        run: poetry run black --check --diff app tests
        
      - name: Run isort
        working-directory: ./backend
        run: poetry run isort --check-only --diff app tests
        
      - name: Run flake8
        working-directory: ./backend
        run: poetry run flake8 app tests
        
      - name: Run mypy
        working-directory: ./backend
        run: poetry run mypy app

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          
      - name: Install dependencies
        working-directory: ./backend
        run: poetry install --no-interaction
        
      - name: Run Bandit security scan
        working-directory: ./backend
        run: poetry run bandit -r app -f json -o bandit-report.json
        continue-on-error: true
        
      - name: Run Safety check
        working-directory: ./backend
        run: poetry run safety check --json --output safety-report.json
        continue-on-error: true
        
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_pbl
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          
      - name: Install dependencies
        working-directory: ./backend
        run: poetry install --no-interaction
        
      - name: Run unit tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_pbl
          REDIS_URL: redis://localhost:6379/0
          TESTING: 1
        run: |
          poetry run pytest tests/unit/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --junit-xml=test-results.xml \
            -v
            
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-unit
          path: |
            backend/test-results.xml
            backend/htmlcov/
            backend/coverage.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_pbl
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          
      - name: Install dependencies
        working-directory: ./backend
        run: poetry install --no-interaction
        
      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_pbl
        run: poetry run alembic upgrade head
        
      - name: Run integration tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_pbl
          REDIS_URL: redis://localhost:6379/0
          TESTING: 1
        run: |
          poetry run pytest tests/integration/ \
            --cov=app \
            --cov-append \
            --cov-report=xml \
            --junit-xml=integration-test-results.xml \
            -v
            
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-integration
          path: |
            backend/integration-test-results.xml
            backend/coverage.xml

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [unit-tests, integration-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry and dependencies
        working-directory: ./backend
        run: |
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry install --no-interaction
          
      - name: Start application for testing
        working-directory: ./backend
        run: |
          poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          
      - name: Run performance tests
        working-directory: ./performance_tests
        run: |
          pip install locust
          locust -f load_test.py --host=http://localhost:8000 \
            --users=50 --spawn-rate=5 --run-time=2m \
            --html=performance_report.html --headless
            
      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: performance_tests/performance_report.html

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.pbl-assistant.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster pbl-staging-cluster \
            --service pbl-backend-service \
            --force-new-deployment
            
      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster pbl-staging-cluster \
            --services pbl-backend-service
            
      - name: Run health checks
        run: |
          sleep 30
          curl -f https://staging-api.pbl-assistant.com/health || exit 1
          
      - name: Run smoke tests
        working-directory: ./backend
        run: |
          poetry run pytest tests/smoke/ \
            --base-url=https://staging-api.pbl-assistant.com \
            -v

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.pbl-assistant.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Create deployment backup
        run: |
          # Backup current production deployment
          aws ecs describe-services \
            --cluster pbl-production-cluster \
            --services pbl-backend-service \
            > deployment-backup.json
            
      - name: Deploy to production with blue-green strategy
        run: |
          # Blue-green deployment script
          ./scripts/blue-green-deploy.sh pbl-production-cluster pbl-backend-service
          
      - name: Run production health checks
        run: |
          sleep 60
          for i in {1..10}; do
            if curl -f https://api.pbl-assistant.com/health; then
              echo "Health check passed"
              break
            else
              echo "Health check failed, attempt $i/10"
              sleep 30
            fi
          done
          
      - name: Run production smoke tests
        working-directory: ./backend
        run: |
          poetry run pytest tests/smoke/ \
            --base-url=https://api.pbl-assistant.com \
            -v
            
      - name: Update monitoring dashboards
        run: |
          # Update Grafana dashboards and alerts
          curl -X POST "https://grafana.pbl-assistant.com/api/dashboards/db" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @monitoring/grafana_dashboard.json

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify Slack on Success
        if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'deployments'
          SLACK_COLOR: 'good'
          SLACK_MESSAGE: |
            🚀 Backend deployment successful!
            Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            
      - name: Notify Slack on Failure
        if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'deployments'
          SLACK_COLOR: 'danger'
          SLACK_MESSAGE: |
            ❌ Backend deployment failed!
            Environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Please check the logs and take action.

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Clean up old Docker images
        run: |
          # Keep only last 5 images
          echo "Cleaning up old container images..."
          # This would be implemented based on your container registry
          
      - name: Archive test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: all-test-results
          path: |
            backend/test-results.xml
            backend/integration-test-results.xml
            backend/htmlcov/
            backend/coverage.xml
          retention-days: 30