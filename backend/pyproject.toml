[project]
name = "pbl-intelligent-assistant"
version = "1.0.0"
description = "AI时代创新教育PBL课程设计智能助手后端API"
authors = [
    {name = "PBL Assistant Team", email = "team@pbl-assistant.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["PBL", "education", "AI", "agents", "FastAPI", "LangGraph"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Web框架
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    # 数据库
    "sqlalchemy>=2.0.23",
    "asyncpg>=0.29.0",
    "alembic>=1.12.1",
    # 缓存
    "redis>=5.0.1",
    "hiredis>=2.2.3",
    # 移除向量数据库依赖，专注核心功能
    # AI和智能体框架
    "langchain>=0.0.350",
    "langchain-core>=0.1.0",
    "langchain-openai>=0.0.5",
    "langchain-anthropic>=0.0.4",
    "langgraph>=0.0.60",
    # 认证和安全
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "passlib[bcrypt]>=1.7.4",
    "bcrypt>=4.1.2",
    # 数据验证
    "pydantic[email]>=2.5.0",
    "pydantic-settings>=2.1.0",
    # HTTP客户端
    "httpx>=0.25.2",
    "aiohttp>=3.9.1",
    # 工具库
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    "structlog>=23.2.0",
    # 文件处理
    "python-magic>=0.4.27",
    "pillow>=10.1.0",
    # 异步任务
    "celery[redis]>=5.3.4",
    # 配置管理
    "python-dotenv>=1.0.0",
    # 健康检查
    "requests>=2.31.0",
    "prometheus-fastapi-instrumentator>=7.1.0",
    "markdown>=3.9",
    "python-docx>=1.2.0",
    "python-pptx>=1.0.2",
    "jinja2>=3.1.6",
    "aiosqlite>=0.21.0",
    "reportlab>=4.4.4",
    "fpdf2>=2.8.4",
]

[project.optional-dependencies]
dev = [
    # 测试框架
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    
    # 代码质量
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.4",
    
    # 开发工具
    "pre-commit>=3.6.0",
    "jupyter>=1.0.0",
    "ipython>=8.17.2",
    
    # 性能分析
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
]

test = [
    "pytest-xdist>=3.5.0",  # 并行测试
    "factory-boy>=3.3.0",   # 测试数据工厂
    "faker>=20.1.0",        # 假数据生成
]

docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
]

# 移除scripts配置，使用uv run代替

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

# 工具配置
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.uv-cache
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "chromadb.*",
    "langchain.*",
    "langgraph.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*", 
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1", 
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.4",
    "pre-commit>=3.6.0",
    "jupyter>=1.0.0",
    "ipython>=8.17.2",
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    "pytest-xdist>=3.5.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
]
